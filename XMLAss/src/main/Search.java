/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import db.DataAccessObject;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author Windows
 */
public class Search extends javax.swing.JFrame {

    DataAccessObject db;
    int[] widthColumn = {50, 50, 50, 50, 50, 100, 100, 100, 100, 100, 100, 100, 100, 100,
        100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
        100, 75, 75, 75, 75, 100, 100, 100, 50, 50, 50, 50, 50, 50,};

    /**
     * Creates new form Search
     */
    public Search() {
        initComponents();

        db = new DataAccessObject();
        loadData();

        tblData.setDragEnabled(false);
        tblData.setRowSelectionAllowed(true);
        tblData.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
                public void valueChanged(ListSelectionEvent event) {
                   CheckMaDaiLy();
                }
            });
        
        jButton1.setVisible(false);
        jButton2.setVisible(false);
        
        cbbItem.removeAllItems();
        for (int i = 0; i < Instance.data.length - 1; i++) {
            cbbItem.addItem(Instance.dataShow[i]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfSearchText = new javax.swing.JTextField();
        cbbItem = new javax.swing.JComboBox();
        btnSearch = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tfSearchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSearchTextActionPerformed(evt);
            }
        });

        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setToolTipText("");
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        )
    );
    tblData.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    tblData.setFocusable(false);
    tblData.setRequestFocusEnabled(false);
    jScrollPane3.setViewportView(tblData);

    jButton1.setText("Xóa");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    jButton2.setText("Sửa");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    jButton3.setText("Thoát");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(tfSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(cbbItem, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnSearch)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                    .addComponent(jButton2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton1))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jButton3)
                    .addGap(26, 26, 26)))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(tfSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cbbItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnSearch)
                .addComponent(jButton1)
                .addComponent(jButton2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jButton3)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfSearchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSearchTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSearchTextActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        searchingWithCondition();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            String idContract = "";
            int row = tblData.getSelectedRow();

            ResultSet rs = db.getResulSet("Select * from Contracts where SoHopDong = '" + tblData.getValueAt(row, 0).toString() + "'");
            if (!rs.next()) {
                return;
            }

            idContract = rs.getString(1);
            Instance.idContract = idContract;
            Instance.xStatus = 1;

            CreateFormClient();
        } catch (SQLException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int clickSave = JOptionPane.showConfirmDialog(null, "Xoá bản ghi?", null, JOptionPane.YES_NO_OPTION);
        System.out.println("Nhac nho xoa ban ghi");
        if (clickSave == JOptionPane.YES_OPTION) {
            try {
                // TODO add your handling code here:
                String idContract = "", soHopDong = "", MaKhachHang = "";
                int row = tblData.getSelectedRow();

                soHopDong = tblData.getValueAt(row, 0).toString();
                MaKhachHang = tblData.getValueAt(row, 1).toString();
                ResultSet rs = db.getResulSet("Select * from Contracts where SoHopDong = '" + soHopDong + "' AND MaKhachHang = '" + MaKhachHang + "'");
                if (rs.next()) {
                    idContract = rs.getString(1);
                    Instance.idContract = idContract;
                    
                    String idService = rs.getString("DichVuID");

                    String sql = "Insert into ContractsLocal (id, SoHopDong, MaKhachHang, MaDaiLy, NgayDKHopDong, DiaDiemDKHopDong,"
                            + " TenKhachHang, NguoiDaiDien, ChucVu, NgaySinh, GioiTinh, CMND, NoiCapCMND, NgayCapCMND, SoHoKhau,"
                            + " NoiCapSoHoKhau, NgayCapSoHoKhau, SoGiayChungNhanDKDN, NoiCapDKDN, NgayCapDKDN, SoNha, Duong, xTo,"
                            + " PhuongXa, QuanHuyen, TinhTp, SDTKhachHang, Email, MaSoThueKhachHang, DichVuID, NhanBaoCuoc,"
                            + " NhanBaoCuocKhac, NhanBanKe, NhanBanKeKhac, EmailNhanBaoCuoc, SDTNhanBaoCuoc, ThanhToan, "
                            + "ThanhToanKhac, SoTaiKhoanThanhToan, NganHang, ChiNhanh, xStatus)"
                            + " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ";
                    db.executeSQLwithParams(sql, DataAccessObject.MODE_UPDATE.SMALL_UPDATE, rs.getString(1),
                            rs.getString("SoHopDong"), rs.getString("MaKhachHang"), rs.getString("MaDaiLy"), rs.getString("NgayDKHopDong"), rs.getString("DiaDiemDKHopDong"),
                            rs.getString("TenKhachHang"), rs.getString("NguoiDaiDien"), rs.getString("ChucVu"), rs.getString("NgaySinh"), rs.getString("GioiTinh"), rs.getString("CMND"), rs.getString("NoiCapCMND"), rs.getString("NgayCapCMND"), rs.getString("SoHoKhau"),
                            rs.getString("NoiCapSoHoKhau"), rs.getString("NgayCapSoHoKhau"), rs.getString("SoGiayChungNhanDKDN"), rs.getString("NoiCapDKDN"), rs.getString("NgayCapDKDN"), rs.getString("SoNha"), rs.getString("Duong"), rs.getString("xTo"),
                            rs.getString("PhuongXa"), rs.getString("QuanHuyen"), rs.getString("TinhTp"), rs.getString("SDTKhachHang"), rs.getString("Email"), rs.getString("MaSoThueKhachHang"), rs.getString("DichVuID"), rs.getString("NhanBaoCuoc"),
                            rs.getString("NhanBaoCuocKhac"), rs.getString("NhanBanKe"), rs.getString("NhanBanKeKhac"), rs.getString("EmailNhanBaoCuoc"), rs.getString("SDTNhanBaoCuoc"), rs.getString("ThanhToan"),
                            rs.getString("ThanhToanKhac"), rs.getString("SoTaiKhoanThanhToan"), rs.getString("NganHang"), rs.getString("ChiNhanh"), "-1"
                    );

                    System.out.println("Xoa xong ban ghi: " + rs.getString("id"));

                    rs = db.getResulSet("Select * from ServicesLocal where id = '" + idService + "'");
                    if (!rs.next()) {
                        rs = db.getResulSet("Select * from Services where id = '" + idService + "'");
                        if (rs.next()) {
                            sql = "Insert into ServicesLocal (id, LoaiDichVu1, DiaChiLapDat1, SDTLapDat1, GoiCuoc1, PhiHoaMang1, GhiChu1,"
                                    + " LoaiDichVu2, DiaChiLapDat2, SDTLapDat2, GoiCuoc2, PhiHoaMang2, GhiChu2,"
                                    + " LoaiDichVu3, DiaChiLapDat3, SDTLapDat3, GoiCuoc3, PhiHoaMang3, GhiChu3,"
                                    + " LoaiDichVu4, DiaChiLapDat4, SDTLapDat4, GoiCuoc4, PhiHoaMang4, GhiChu4,"
                                    + " LoaiDichVu5, DiaChiLapDat5, SDTLapDat5, GoiCuoc5, PhiHoaMang5, GhiChu5, xStatus)"
                                    + " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?, -1)";
                            db.executeSQLwithParams(sql, DataAccessObject.MODE_UPDATE.SMALL_UPDATE, idService,
                                    rs.getString("LoaiDichVu1"), rs.getString("DiaChiLapDat1"), rs.getString("SDTLapDat1"), rs.getString("GoiCuoc1"), rs.getString("PhiHoaMang1"), rs.getString("GhiChu1"),
                                    rs.getString("LoaiDichVu2"), rs.getString("DiaChiLapDat2"), rs.getString("SDTLapDat2"), rs.getString("GoiCuoc2"), rs.getString("PhiHoaMang2"), rs.getString("GhiChu2"),
                                    rs.getString("LoaiDichVu3"), rs.getString("DiaChiLapDat3"), rs.getString("SDTLapDat3"), rs.getString("GoiCuoc3"), rs.getString("PhiHoaMang3"), rs.getString("GhiChu3"),
                                    rs.getString("LoaiDichVu4"), rs.getString("DiaChiLapDat4"), rs.getString("SDTLapDat4"), rs.getString("GoiCuoc4"), rs.getString("PhiHoaMang4"), rs.getString("GhiChu4"),
                                    rs.getString("LoaiDichVu5"), rs.getString("DiaChiLapDat5"), rs.getString("SDTLapDat5"), rs.getString("GoiCuoc5"), rs.getString("PhiHoaMang5"), rs.getString("GhiChu5")
                            );
                        }
                    } else {
                        sql = "Update ServicesLocal SET xStatus = -1 Where id = '" + idService + "'";
                        db.executeSQLwithParams(sql, DataAccessObject.MODE_UPDATE.SMALL_UPDATE);
                    }

                    db.executeSQLwithParams("delete from Services where id = '" + idService + "'", DataAccessObject.MODE_UPDATE.SMALL_UPDATE);
                    db.executeSQLwithParams("delete from Contracts where id = '" + idContract + "'", DataAccessObject.MODE_UPDATE.SMALL_UPDATE);
                    System.out.println("delete from Contracts where id = '" + idContract + "'");

                    searchingWithCondition();
                } else{
                    System.out.println("Tim khong ra: " + idContract);
                }
            } catch (SQLException ex) {
                Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        setFocusable(false);
        setEnabled(false);
        setVisible(false);        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Search().setVisible(true);
            }
        });
    }
    
    void CheckMaDaiLy(){
        if(tblData.getSelectedRow() <0)
            return;
        
        String maDL = (String) tblData.getValueAt(tblData.getSelectedRow(), 2);
        
        if(maDL.equalsIgnoreCase(Instance.MaDL)){
            jButton1.setVisible(true);
            jButton2.setVisible(true);
        }else{
            jButton1.setVisible(false);
            jButton2.setVisible(false);
        }
    }

    void CreateFormClient() {
        FromClient f = new FromClient();
        f.setVisible(true);
        f.setFocusable(true);
        setFocusable(false);
        setEnabled(false);
        setVisible(false);
    }

    public void searchingWithCondition() {
        int columnSearch = cbbItem.getSelectedIndex();
        String searchKey = tfSearchText.getText();
        DefaultTableModel model = new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        try {
//            ResultSet rs = db.getResulSet("select * from contracts where MaDaiLy = '" + Instance.MaDL + "' and "
//                    + Instance.data[columnSearch] + " like '%" + searchKey + "%'");
            ResultSet rs = db.getResulSet("select * from contracts where "
                    + Instance.data[columnSearch] + " like '%" + searchKey + "%'");

            ResultSetMetaData rsmd = rs.getMetaData();
            int colNumber = rsmd.getColumnCount() - 1;
            String[] arr = new String[colNumber];
            for (int i = 0; i < arr.length; i++) {
                arr[i] = new String(Instance.dataShow[i]);
            }

            model.setColumnIdentifiers(arr);

            while (rs.next()) {
//                arr = new String[colNumber];
//                String bufferString = rs.getString(columnSearch+1);
//                if(bufferString.contains(searchKey)){
                for (int i = 0; i < colNumber; i++) {
                    arr[i] = rs.getString(i + 2);
                }
                model.addRow(arr);
//                }
            }

            tblData.setModel(model);
            tblData.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            setColumnWidth(widthColumn, colNumber);
        } catch (SQLException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void loadData() {

        DefaultTableModel model = new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        try {
//            ResultSet rs = db.getResulSet("select * from contracts where MaDaiLy = '" + Instance.MaDL + "'");
            ResultSet rs = db.getResulSet("select * from contracts");

            ResultSetMetaData rsmd = rs.getMetaData();
            int colNumber = rsmd.getColumnCount() - 1;
            String[] arr = new String[colNumber];
            for (int i = 0; i < arr.length; i++) {
                arr[i] = new String(Instance.dataShow[i]);
            }

            model.setColumnIdentifiers(arr);

            while (rs.next()) {
                for (int i = 0; i < colNumber; i++) {
                    arr[i] = rs.getString(i + 2);
                }
                model.addRow(arr);
            }
            tblData.setModel(model);
            tblData.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            setColumnWidth(widthColumn, colNumber);
        } catch (SQLException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void setColumnWidth(int[] width, int col) {
        for (int i = 0; i < col; i++) {
            TableColumn tableColumn = tblData.getColumnModel().getColumn(i);
            tableColumn.setPreferredWidth(width[i]);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbbItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField tfSearchText;
    // End of variables declaration//GEN-END:variables
}
